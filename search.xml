<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title></title>
      <url>/2017/07/14/markdown%20%E6%B5%8B%E8%AF%95/</url>
      <content type="html"><![CDATA[<h2 id="markdown-测试"><a href="#markdown-测试" class="headerlink" title="markdown 测试"></a>markdown 测试</h2><h3 id="设置代码块"><a href="#设置代码块" class="headerlink" title="设置代码块"></a>设置代码块</h3><figure class="highlight plain"><figcaption><span>```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">```下面是Java代码</div><div class="line">package binaryheap;</div><div class="line"></div><div class="line">public class BinaryHeap &#123;</div><div class="line">	private static final int DEFAULT_CAPACITY=10;</div><div class="line">	public int currentSize;</div><div class="line">	public int [] array;</div><div class="line">	</div><div class="line">	private void percolateDown(int hole)&#123;</div><div class="line">		int child=0;</div><div class="line">		//tmp值是那个传入的最初要下沉的值</div><div class="line">		int tmp=array[hole];</div><div class="line">		//这个for循环，结束之后,hole要不就是最后一个，要不就满足了堆，（子树）根节点最小的特性</div><div class="line">		for(;hole*2&lt;=currentSize;hole=child)&#123;</div><div class="line">			</div><div class="line">			child=hole*2;</div><div class="line">			if(child!=currentSize &amp;&amp; (array[child+1]&lt;array[child]) ) child++;</div><div class="line">			//如上的语句结束可以得到两个子节点中较小的那个</div><div class="line">			if(array[child]&lt;tmp)&#123;</div><div class="line">				array[hole]=array[child];</div><div class="line">			&#125;else break;</div><div class="line">			//如上判断结束hole到了最终的位置</div><div class="line">		&#125;</div><div class="line">		array[hole]=tmp;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	private void buildHeap()&#123;</div><div class="line">		//这里从currentSize/2这个位置（最后一个非叶节点）开始，直到根节点，不断下滤调整堆序。</div><div class="line">		for(int i= currentSize/2;i&gt;0;i--)&#123;</div><div class="line">			percolateDown(i);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public void enlarge(int newSize)&#123;</div><div class="line">		int [] tmp=new int[newSize];</div><div class="line">		for(int i=1;i&lt;=currentSize;i++)&#123;</div><div class="line">			tmp[i]=array[i];</div><div class="line">		&#125;</div><div class="line">		array=tmp;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public BinaryHeap(int [] data)&#123;</div><div class="line">		//先依据传入的数组，建造无序堆，在调整成有序堆。</div><div class="line">		currentSize=data.length;</div><div class="line">		array=new int[(currentSize+2)*11/10];</div><div class="line">		int i=1;</div><div class="line">		for(int item : data) array[i++]=item;</div><div class="line">		buildHeap();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public void makeEmpty()&#123;</div><div class="line">		currentSize=0;</div><div class="line">	&#125;</div><div class="line">	public boolean isEmpty()&#123;</div><div class="line">		return currentSize==0;</div><div class="line">	&#125;</div><div class="line">	public int min()&#123;</div><div class="line">		if(isEmpty()) &#123;</div><div class="line">			System.out.println(&quot;堆为空！返回-1&quot;);</div><div class="line">			return -1;</div><div class="line">		&#125;</div><div class="line">		else&#123;</div><div class="line">			return array[1];</div><div class="line">			&#125;</div><div class="line">	&#125;</div><div class="line">	public int deleteMin()&#123;</div><div class="line">		if(isEmpty()) &#123;</div><div class="line">			System.out.println(&quot;堆为空！返回-1&quot;);</div><div class="line">			return -1;</div><div class="line">		&#125;</div><div class="line">		int lastmin =min();</div><div class="line">		array[1]=array[currentSize--];</div><div class="line">		percolateDown(1);</div><div class="line">		return lastmin;</div><div class="line">	&#125;</div><div class="line">	public void insert(int data)&#123;</div><div class="line">		//自动扩容</div><div class="line">		if(currentSize==array.length-1)&#123;</div><div class="line">			enlarge(array.length*2+1);</div><div class="line">		&#125;</div><div class="line">		//上冒操作</div><div class="line">		 int hole=++currentSize;</div><div class="line">		 for(;hole&gt;1 &amp;&amp; data &lt; array[hole/2];hole/=2) array[hole]=array[hole/2];</div><div class="line">		 array[hole]=data;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[测试]]></title>
      <url>/2017/02/13/%E6%B5%8B%E8%AF%95/</url>
      <content type="html"><![CDATA[<p>因为我们的博文都是用Markdown语言写的，所以首先，你需要一个好用的Markdown编辑器。其实好用的Markdown编辑器一大堆，这里就给大家推荐两个，如果你用的不习惯也可以换其它的。</p>
<pre><code>本地编辑器：Haroopad，非常小众的一款Markdown编辑器，左边编辑右边实时预览效果，非常轻便；

在线编辑器：MaHua，也是比较小众的一款Markdown编辑器，但效果确实很棒，我的这篇博文就是用MaHua写的。
</code></pre><p><img src="http://ot11hkokg.bkt.clouddn.com/17-7-13/8384467.jpg" alt="hello"></p>
<p>‘’‘<br>from django import template import mistune from pygments import highlight from pygments.lexers import get_lexer_by_name from pygments.formatters import HtmlFormatter register = template.Library() def block_code(text, lang, inlinestyles=False, linenos=False): if not lang: text = text.strip() return u’<pre><code>%s</code></pre>\n’ % mistune.escape(text) try: lexer = get_lexer_by_name(lang, stripall=True) formatter = HtmlFormatter( noclasses=inlinestyles, linenos=linenos ) code = highlight(text, lexer, formatter) if linenos: return ‘<div class="highlight">%s</div>\n’ % code return code except: return ‘<pre class="%s"><code>%s</code></pre>\n’ % ( lang, mistune.escape(text) ) class HighlightMixin(object): def block_code(self, text, lang): # renderer has an options inlinestyles = self.options.get(‘inlinestyles’) linenos = self.options.get(‘linenos’) return block_code(text, lang, inlinestyles, linenos) class TocRenderer(HighlightMixin, mistune.Renderer): pass @register.filter def markdown_detail(value): renderer = TocRenderer(linenos=True, inlinestyles=False) mdp = mistune.Markdown(escape=True, renderer=renderer) return mdp(value)</p>
<p>作者：大阿拉伯人<br>链接：<a href="http://www.jianshu.com/p/2909aed83dad" target="_blank" rel="external">http://www.jianshu.com/p/2909aed83dad</a><br>來源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。<br>’‘’</p>
]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> YAYA </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[建站笔记]]></title>
      <url>/2016/07/12/%E5%BB%BA%E7%AB%99%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>安装node.js<br>准备命令： yum -y install gcc make gcc-c++ openssl-devel wget<br>去node.js中文网下载linux 64位的安装文件 xxx.tar.xz<br>解压缩文件 xz -d node-v8.1.3-linux-x64.tar.xz 再解压缩 tar -xvf node-v8.1.3-linux-x64.tar<br>把文件直接移到 指定文件夹中 sudo mv node-v8.1.3-linux-x64 /usr/local<br>配置环境变量 sudo vim /etc/profile 添加如下：export PATH=$PATH:/usr/local/nodejs/bin 生效 source /etc/profile<br>查看是否配置成功：echo $PATH<br>检查node.js是否配置成功 node -v npm -v<br><a id="more"></a><br>安装git:<br>直接安装：sudo yum install git<br>查看是否安装成功：git –version<br>查看安装位置：which git<br>配置git :git config –global user.name “LingJiangXie”<br>         git config –global user.email “xielj1994@outlook.com”<br>查看配置列表：git config –list</p>
<p>在自己的git上新建一个 LingJiangXie.github.io（不能为空，否则没有节点）<br>ssh 密药配置 参考<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001374385852170d9c7adf13c30429b9660d0eb689dd43a000" target="_blank" rel="external">http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001374385852170d9c7adf13c30429b9660d0eb689dd43a000</a></p>
<p>其他基本参考：<a href="http://www.cnblogs.com/wanghuaijun/p/7073296.html" target="_blank" rel="external">http://www.cnblogs.com/wanghuaijun/p/7073296.html</a></p>
<p>部署服务时 出现问题参考：npm install hexo-deployer-git –save （此命令在新建的本地博客文件夹根目录执行）改了之后执行，然后再部署试试</p>
<p>修改，更换完主题 重新执行<br>//生成静态文件<br>hexo generate</p>
<p>//部署服务<br>hexo deploy</p>
<p>还可以参考这个：</p>
<p><a href="https://zhuanlan.zhihu.com/p/26625249" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/26625249</a> 比较全</p>
]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> YAYA </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
