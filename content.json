{"meta":{"title":"领江的小博客","subtitle":"记录在学校挣扎的苦逼生活...","description":null,"author":"Dany Xie","url":"http://sowhatxie.top"},"pages":[{"title":"我呀。。","date":"2017-07-12T12:29:13.000Z","updated":"2017-07-12T12:31:28.177Z","comments":true,"path":"about/index.html","permalink":"http://sowhatxie.top/about/index.html","excerpt":"","text":"挣扎中，欢迎小姐姐来拯救我哦！"}],"posts":[{"title":"","slug":"复盘一阶段","date":"2017-07-15T08:59:13.020Z","updated":"2017-07-15T08:59:13.007Z","comments":true,"path":"2017/07/15/复盘一阶段/","link":"","permalink":"http://sowhatxie.top/2017/07/15/复盘一阶段/","excerpt":"学习方法领域内，国际顶级会议：internation conference on data mining internation conference on data engineering internation conference on machine learning internation joint conference on artificial intelligence pacific-asia conference on knowledge discoverry and data mining acm sigkdd conference on knowledge iscoverry and data mining 还有一些IEEE的领域内顶级期刊 跟踪领域内，专家 必须用Google 搜文献 利用 machine learning repository UCI 来收集数据集","text":"学习方法领域内，国际顶级会议：internation conference on data mining internation conference on data engineering internation conference on machine learning internation joint conference on artificial intelligence pacific-asia conference on knowledge discoverry and data mining acm sigkdd conference on knowledge iscoverry and data mining 还有一些IEEE的领域内顶级期刊 跟踪领域内，专家 必须用Google 搜文献 利用 machine learning repository UCI 来收集数据集还有 kd nuggets 这个网站 基于此，掌握领域前沿开阔视野 数据挖掘，是一个综合的领域，多学科交叉 /Users/DANNY/Documents/博客内图片/7.15涉及的小方面.png 学习方法： 课堂或看视频 思考与讨论 阅读相关材料 扩展与启发 联系 技术技巧与应用 开放数据如何寻找，下载数据？ 分类监督学习 专业名词： 分类边界 classification boundaries 过拟合 overfitting 交叉验证 cross validation （训练集 测试集） confusion matrix 混淆矩阵 ： 假设一个二分类问题 样本本身具有 positive negative ，此外训练得到模型也会给样本进行预测，给出预测值 positive negative 因此基于此，衍生出四种情况 ： true positive TP （本来的标签就是 positive ，模型给出的预测值也是 positive） false negative FN (本来的标签是 positive ，模型给出的预测值是 negative) false positive FP (本来的标签是 negative ，模型给出的预测值是 positive) true negative TN （本来的标签就是 negative ，模型给出的预测值也是 negative） 基于这四种情况，给出这些统计量：略 receiver operating characteristic (ROC 曲线) ，一般横坐标 FP 纵坐标 TP，FP + TP =1 。 AUC 曲线下方的面积 cost sensitive learning 不同领域侧重点不同（权重不同），错误代价不同。lift analysis 利用模型相较于不用模型，提升度有多少。 聚类及其他挖掘问题非监督学习 层次聚类，非层次聚类： 距离度量（相似度）： 关联规则（association rule）： 回归：过拟合等 算法： 应用： 可视化（seeing is knowing ）： 可解释性 performance dashboard 数据预处理（data preprocessing ）：数据质量 是很基础却又很关键的一步 数据挖掘是挖掘规律，而不产生规律 注意内在规律 相关性不等于因果 幸存者偏执（survivorship bias ） 不清楚这点，可能会本末倒置 盲人摸象 看问题要全面 隐私保护与并行计算数据预处理 （data preprocessing）总纲： data cleaning data transformation data description feature selection feature extraction 数据来源 来源，格式均不同数据预处理，可能是整个数据挖掘过程中最具有挑战性的工作。 脏数据：不完全，缺失（采集设备故障等原因；采集时，受试者未提供；数据不适合 N/A）； 种类：完全随机缺失，条件随机缺失，等等。有噪声；冗余。。。。 处理手段：忽视；填缺失值（自动；凭借领域知识，经验）； 离群与重复值检测处理：离群点（Outliers）离群是一个相对的概念，如何度量？异常点（anomaly） duplicate data （重复检测）：从冗余信息中，区分出是否有些东西指的是同一个东西 技术：滑动窗口；哈希散列（相近的的给出相近的哈希值）； 类型转换与采样： 对不同类型，采用合适的编码方式？低维的转到高维来处理。。。。。 利用采样，降低处理的复杂度。aggregation ,调整比例。。。。 对于本身就不平衡的数据集，如何处理？不能完全依据准确率来评判分类器的性能（评判癌症）。G-mean，F-measure，over-sampling,boundary-sampling(边缘采样) 数据描述与可视化normalization(标准化)：min-max（明确上下界）；z-score（根据均值）；数据描述的一些统计量：均值，中位数，mode，variance。。。可视化：不同的维度；各种不同的可视化方式（各种XXX图） 特征选择（feature selection）去除一些不要的属性；好的属性，能够有很好的区分度。如何量化？利用熵（entropy）量化区分度。信息增益。 branch and bound ：单调性假设；剪枝；top k individual features；sequential forward selection ;sequential backword selection ; 主成分分析（PCA）特征的压缩，而非去除。角度不同，得到的信息不同。坐标轴旋转，转换矩阵。降维，投影；拉格朗日乘数法，把约束的优化，转化为无约束优化。","categories":[],"tags":[]},{"title":"markdown测试2","slug":"测试 最大标题","date":"2017-05-14T07:17:10.000Z","updated":"2017-07-15T08:58:15.936Z","comments":true,"path":"2017/05/14/测试 最大标题/","link":"","permalink":"http://sowhatxie.top/2017/05/14/测试 最大标题/","excerpt":"测试 最大标题段落标题 1下面是一个无序列表（无缩进） 换行两个以上空格再加回车 1 第一行 3 第二行 4 第三行 5 第四行 下面又是一个无序列表（本行无缩进） 1 第一行 2 第二行 3 第三行 段落标题 2直接两个空格（没有缩进） &emsp;&emsp;这里直接利用写两个全角空格代码缩进 下面是有序列表 第一行 第二行 第三行","text":"测试 最大标题段落标题 1下面是一个无序列表（无缩进） 换行两个以上空格再加回车 1 第一行 3 第二行 4 第三行 5 第四行 下面又是一个无序列表（本行无缩进） 1 第一行 2 第二行 3 第三行 段落标题 2直接两个空格（没有缩进） &emsp;&emsp;这里直接利用写两个全角空格代码缩进 下面是有序列表 第一行 第二行 第三行 &emsp;&emsp;在列表之前和之后，都是要有换行的，不然列表会失效。另外在列表符号后要有空格这里直接使用代码换行，感觉比较好用，很明确。这一段，我试验引用&emsp;&emsp;引用是可以嵌套的哦！ 这是单行引用。在处于引用范围内，回车换行不会真的换行的哦！这里我直接输代码，结束引用好像还是不行，确实是换行了，但还没有脱离引用的范围，我猜是要主动删除引用符，我试试 果然结束了哦，哈哈这里用了两个换行，果然是换了两行。这里我来实验一下嵌套的引用 在这里是最外层引用范围 呀的什么鬼，我在里面。好舒服！ 这里还是最外层的引用，不过马上就要结束了，再见，不散!(注意哦，我跟你说，要实现嵌套，需要在里面加一个换行，脱离内层引用。) 这里我要试验一下，代码块代码块内是可以使用一般的缩进的 12我在代码块里面在代码块里面感觉就是一般的书写没有别的什么特别的 这里是行内代码块 哈哈就是我 你看到了吗。（注意：需要和普通段落之间存在空行。）行内代码块的作用，我觉得，是可以展示一些有特效的东西，放进引用，就没有格式了。 我要试试，链接和图片了链接可以由两种形式生成：行内式和参考式。注意： 参考式链接和行内链接的显示效果是一样的。但是在编辑状态下的使用情况不一样。行内连接紧跟链接文字，可以在看到链接文字的同时清楚的知道链接地址，但是不便于多次重复利用。参考式链接我觉得可以放在文尾，用来展示引用。 使用 [](link &quot;Optional title&quot;) 表示行内链接。 这里是一个链接：链接文字放在框框里面 参考式文字 我要试试参考式开始文字参考式文字","categories":[{"name":"笔记","slug":"笔记","permalink":"http://sowhatxie.top/categories/笔记/"}],"tags":[{"name":"YAYA","slug":"YAYA","permalink":"http://sowhatxie.top/tags/YAYA/"},{"name":"Hexo","slug":"Hexo","permalink":"http://sowhatxie.top/tags/Hexo/"}]},{"title":"markdown测试","slug":"markdown 测试","date":"2017-05-13T07:17:10.000Z","updated":"2017-07-15T08:57:32.958Z","comments":true,"path":"2017/05/13/markdown 测试/","link":"","permalink":"http://sowhatxie.top/2017/05/13/markdown 测试/","excerpt":"markdown 测试设置代码块","text":"markdown 测试设置代码块 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889package binaryheap;public class BinaryHeap &#123; private static final int DEFAULT_CAPACITY=10; public int currentSize; public int [] array; private void percolateDown(int hole)&#123; int child=0; //tmp值是那个传入的最初要下沉的值 int tmp=array[hole]; //这个for循环，结束之后,hole要不就是最后一个，要不就满足了堆，（子树）根节点最小的特性 for(;hole*2&lt;=currentSize;hole=child)&#123; child=hole*2; if(child!=currentSize &amp;&amp; (array[child+1]&lt;array[child]) ) child++; //如上的语句结束可以得到两个子节点中较小的那个 if(array[child]&lt;tmp)&#123; array[hole]=array[child]; &#125;else break; //如上判断结束hole到了最终的位置 &#125; array[hole]=tmp; &#125; private void buildHeap()&#123; //这里从currentSize/2这个位置（最后一个非叶节点）开始，直到根节点，不断下滤调整堆序。 for(int i= currentSize/2;i&gt;0;i--)&#123; percolateDown(i); &#125; &#125; public void enlarge(int newSize)&#123; int [] tmp=new int[newSize]; for(int i=1;i&lt;=currentSize;i++)&#123; tmp[i]=array[i]; &#125; array=tmp; &#125; public BinaryHeap(int [] data)&#123; //先依据传入的数组，建造无序堆，在调整成有序堆。 currentSize=data.length; array=new int[(currentSize+2)*11/10]; int i=1; for(int item : data) array[i++]=item; buildHeap(); &#125; public void makeEmpty()&#123; currentSize=0; &#125; public boolean isEmpty()&#123; return currentSize==0; &#125; public int min()&#123; if(isEmpty()) &#123; System.out.println(&quot;堆为空！返回-1&quot;); return -1; &#125; else&#123; return array[1]; &#125; &#125; public int deleteMin()&#123; if(isEmpty()) &#123; System.out.println(&quot;堆为空！返回-1&quot;); return -1; &#125; int lastmin =min(); array[1]=array[currentSize--]; percolateDown(1); return lastmin; &#125; public void insert(int data)&#123; //自动扩容 if(currentSize==array.length-1)&#123; enlarge(array.length*2+1); &#125; //上冒操作 int hole=++currentSize; for(;hole&gt;1 &amp;&amp; data &lt; array[hole/2];hole/=2) array[hole]=array[hole/2]; array[hole]=data; &#125; &#125; 下一个其实啥都目有！","categories":[{"name":"笔记","slug":"笔记","permalink":"http://sowhatxie.top/categories/笔记/"}],"tags":[{"name":"YAYA","slug":"YAYA","permalink":"http://sowhatxie.top/tags/YAYA/"},{"name":"Hexo","slug":"Hexo","permalink":"http://sowhatxie.top/tags/Hexo/"}]},{"title":"建站笔记","slug":"建站笔记","date":"2016-07-12T10:58:51.000Z","updated":"2017-07-14T03:36:47.097Z","comments":true,"path":"2016/07/12/建站笔记/","link":"","permalink":"http://sowhatxie.top/2016/07/12/建站笔记/","excerpt":"安装node.js准备命令： yum -y install gcc make gcc-c++ openssl-devel wget去node.js中文网下载linux 64位的安装文件 xxx.tar.xz解压缩文件 xz -d node-v8.1.3-linux-x64.tar.xz 再解压缩 tar -xvf node-v8.1.3-linux-x64.tar把文件直接移到 指定文件夹中 sudo mv node-v8.1.3-linux-x64 /usr/local配置环境变量 sudo vim /etc/profile 添加如下：export PATH=$PATH:/usr/local/nodejs/bin 生效 source /etc/profile查看是否配置成功：echo $PATH检查node.js是否配置成功 node -v npm -v","text":"安装node.js准备命令： yum -y install gcc make gcc-c++ openssl-devel wget去node.js中文网下载linux 64位的安装文件 xxx.tar.xz解压缩文件 xz -d node-v8.1.3-linux-x64.tar.xz 再解压缩 tar -xvf node-v8.1.3-linux-x64.tar把文件直接移到 指定文件夹中 sudo mv node-v8.1.3-linux-x64 /usr/local配置环境变量 sudo vim /etc/profile 添加如下：export PATH=$PATH:/usr/local/nodejs/bin 生效 source /etc/profile查看是否配置成功：echo $PATH检查node.js是否配置成功 node -v npm -v安装git:直接安装：sudo yum install git查看是否安装成功：git –version查看安装位置：which git配置git :git config –global user.name “LingJiangXie” git config –global user.email “xielj1994@outlook.com”查看配置列表：git config –list 在自己的git上新建一个 LingJiangXie.github.io（不能为空，否则没有节点）ssh 密药配置 参考http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001374385852170d9c7adf13c30429b9660d0eb689dd43a000 其他基本参考：http://www.cnblogs.com/wanghuaijun/p/7073296.html 部署服务时 出现问题参考：npm install hexo-deployer-git –save （此命令在新建的本地博客文件夹根目录执行）改了之后执行，然后再部署试试 修改，更换完主题 重新执行//生成静态文件hexo generate //部署服务hexo deploy 还可以参考这个： https://zhuanlan.zhihu.com/p/26625249 比较全","categories":[{"name":"笔记","slug":"笔记","permalink":"http://sowhatxie.top/categories/笔记/"}],"tags":[{"name":"YAYA","slug":"YAYA","permalink":"http://sowhatxie.top/tags/YAYA/"},{"name":"Hexo","slug":"Hexo","permalink":"http://sowhatxie.top/tags/Hexo/"}]}]}